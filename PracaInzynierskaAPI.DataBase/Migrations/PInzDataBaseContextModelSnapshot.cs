// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PracaInzynierskaAPI.DataBase.Context;

namespace PracaInzynierskaAPI.DataBase.Migrations
{
    [DbContext(typeof(PInzDataBaseContext))]
    partial class PInzDataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Author.AuthorDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("Surname");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Book.BookDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("Dislikes")
                        .HasColumnType("bigint");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<Guid>("ImageCoverId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Likes")
                        .HasColumnType("bigint");

                    b.Property<int?>("Pages")
                        .HasColumnType("integer");

                    b.Property<int>("PublishedYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageCoverId")
                        .IsUnique();

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("Title");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Book_Author.Book_AuthorDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("Book_Authors");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Book_User.Book_UserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Books");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Category.CategoryDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Comment.CommentDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ToCommentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("BookId");

                    b.HasIndex("ToCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.ImageCover.ImageCoverDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ImageCovers");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Language.LanguageDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Language")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.NLog.NLogDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Application")
                        .HasColumnType("text");

                    b.Property<string>("Callsite")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Logger")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NLogs");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Publisher.PublisherDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<string>("Premises")
                        .HasColumnType("text");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PublisherName")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.User.UserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Banned")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Likes")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("NumberOfBooks")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfComments")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("Id", "UserName", "Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 805, DateTimeKind.Local).AddTicks(5154),
                            IsBuildIn = true,
                            Likes = 0L,
                            NumberOfBooks = 0L,
                            NumberOfComments = 0L,
                            Password = "123",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.UserPermission.UserPermissionDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBuildIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PermissionName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76a4ef96-9f1b-4c7f-9c3f-2daa9ed9401b"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(3985),
                            IsBuildIn = true,
                            PermissionName = "Author.Approve",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("3f34777b-8a49-496c-9dc8-8f13f6a512da"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(4946),
                            IsBuildIn = true,
                            PermissionName = "Author.Update",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("d998336a-005e-4016-b72c-2c01532a5d28"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(4967),
                            IsBuildIn = true,
                            PermissionName = "Author.SoftDelete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("6e6df870-d6dd-4434-80b8-884a6624eae7"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(4975),
                            IsBuildIn = true,
                            PermissionName = "Author.Delete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("43b1e7bb-1d6f-407c-82f5-ec17637e7aad"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(4983),
                            IsBuildIn = true,
                            PermissionName = "Book.Approve",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("823bf0ff-0179-4f6d-a485-e93c9523d700"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(4991),
                            IsBuildIn = true,
                            PermissionName = "Book.Update",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("108ebc86-ceb8-4357-87f6-0b82485a389d"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(4998),
                            IsBuildIn = true,
                            PermissionName = "Book.SoftDelete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("cf69651e-3bb1-49eb-b1ed-a3bb453ba954"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5005),
                            IsBuildIn = true,
                            PermissionName = "Book.Delete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("613750bc-e471-4b28-be60-fd538a802f1e"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5011),
                            IsBuildIn = true,
                            PermissionName = "Category.Write",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("24758f53-051b-4ba1-bea1-317d76c08558"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5018),
                            IsBuildIn = true,
                            PermissionName = "Category.Update",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("1255c632-24c3-4091-b043-72d94c174db8"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5025),
                            IsBuildIn = true,
                            PermissionName = "Category.SoftDelete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("7b073c81-8bcd-4a93-96e3-8ef64b87960b"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5031),
                            IsBuildIn = true,
                            PermissionName = "Category.Delete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("0babc995-ad56-44e2-a92b-ca225f80ae40"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5039),
                            IsBuildIn = true,
                            PermissionName = "Comment.SoftDelete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("77a822b5-2211-4eaa-abef-e28cff58a096"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5046),
                            IsBuildIn = true,
                            PermissionName = "ImageCover.Update",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("08c5d55a-1784-4806-8656-1e13d8c2c61d"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5052),
                            IsBuildIn = true,
                            PermissionName = "ImagCover.Delete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("e0f6bc31-eb25-4dbc-9af5-af200709088e"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5059),
                            IsBuildIn = true,
                            PermissionName = "Language.Write",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("438d0327-21c7-4920-887c-de5e24e1efd2"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5066),
                            IsBuildIn = true,
                            PermissionName = "Language.Update",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("e319013c-ac3f-45d4-b1c0-d23be2664028"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5073),
                            IsBuildIn = true,
                            PermissionName = "Language.SoftDelete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("7b8591d9-aa83-4ff6-8a68-5c8ca41b253f"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5080),
                            IsBuildIn = true,
                            PermissionName = "NLogs.Read",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("00268e14-83df-4882-ba68-1089579eed8a"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5088),
                            IsBuildIn = true,
                            PermissionName = "Publisher.Write",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("1e7d8ef5-3d1d-44bd-b58f-204de558d72d"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5094),
                            IsBuildIn = true,
                            PermissionName = "Publisher.Update",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("bc6cd79c-64c5-4bec-b5aa-e2240a0f7cf4"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5101),
                            IsBuildIn = true,
                            PermissionName = "Publisher.SoftDelete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("d9447300-3048-4e21-bb29-4d943881554c"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5108),
                            IsBuildIn = true,
                            PermissionName = "User.Delete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("c3d979d6-4c97-4ff4-ae14-8319388c90ed"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5115),
                            IsBuildIn = true,
                            PermissionName = "UserPermission.Write",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("23049d10-dfea-458d-b285-3a78f6cf28d9"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5122),
                            IsBuildIn = true,
                            PermissionName = "UserPermission.Update",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        },
                        new
                        {
                            Id = new Guid("78273246-91e9-497e-9823-7948777ddd08"),
                            CreatedAt = new DateTime(2022, 1, 31, 14, 48, 33, 812, DateTimeKind.Local).AddTicks(5129),
                            IsBuildIn = true,
                            PermissionName = "UserPermission.Delete",
                            UserId = new Guid("bcad5300-ef78-4e65-9240-d3609cc88176")
                        });
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Author.AuthorDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.User.UserDbModel", "User")
                        .WithMany("Authors")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("Fk_Author_User")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Book.BookDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.User.UserDbModel", "AddedBy")
                        .WithMany("Books")
                        .HasForeignKey("AddedById");

                    b.HasOne("PracaInzynierskaAPI.Entities.Category.CategoryDbModel", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Fk_Book_Category")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PracaInzynierskaAPI.Entities.ImageCover.ImageCoverDbModel", "ImageCover")
                        .WithOne("Book")
                        .HasForeignKey("PracaInzynierskaAPI.Entities.Book.BookDbModel", "ImageCoverId")
                        .HasConstraintName("Fk_Book_ImageCover")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracaInzynierskaAPI.Entities.Language.LanguageDbModel", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("Fk_Book_Language")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PracaInzynierskaAPI.Entities.Publisher.PublisherDbModel", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("Fk_Book_Publisher")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("Category");

                    b.Navigation("ImageCover");

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Book_Author.Book_AuthorDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.Author.AuthorDbModel", "Author")
                        .WithMany("Book_Author")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("Fk_BookAuthor_Author")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PracaInzynierskaAPI.Entities.Book.BookDbModel", "Book")
                        .WithMany("Book_Author")
                        .HasForeignKey("BookId")
                        .HasConstraintName("Fk_BookAuthor_Book")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Book_User.Book_UserDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.Book.BookDbModel", "Book")
                        .WithMany("BookList")
                        .HasForeignKey("BookId")
                        .HasConstraintName("Fk_BookUser_Book")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PracaInzynierskaAPI.Entities.User.UserDbModel", "User")
                        .WithMany("BooksList")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_BookUSer_User")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Category.CategoryDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.User.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Comment.CommentDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.User.UserDbModel", "User")
                        .WithMany("Comments")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("Fk_Comment_User")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PracaInzynierskaAPI.Entities.Book.BookDbModel", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .HasConstraintName("Fk_Comment_Boook")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PracaInzynierskaAPI.Entities.Comment.CommentDbModel", "ToComment")
                        .WithMany()
                        .HasForeignKey("ToCommentId");

                    b.Navigation("Book");

                    b.Navigation("ToComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Language.LanguageDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.User.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Publisher.PublisherDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.User.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.UserPermission.UserPermissionDbModel", b =>
                {
                    b.HasOne("PracaInzynierskaAPI.Entities.User.UserDbModel", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Author.AuthorDbModel", b =>
                {
                    b.Navigation("Book_Author");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Book.BookDbModel", b =>
                {
                    b.Navigation("Book_Author");

                    b.Navigation("BookList");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Category.CategoryDbModel", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.ImageCover.ImageCoverDbModel", b =>
                {
                    b.Navigation("Book");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Language.LanguageDbModel", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.Publisher.PublisherDbModel", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PracaInzynierskaAPI.Entities.User.UserDbModel", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Books");

                    b.Navigation("BooksList");

                    b.Navigation("Comments");

                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
